service: autoantibody-api
frameworkVersion: "3"

plugins:
  - serverless-better-credentials
  - serverless-python-requirements
  - serverless-offline

useDotenv: true

package:
  individually: true
  patterns:
    - "requirements.txt"
    - "functions/**"

custom:
  stage: ${opt:stage, 'dev'}
  pythonRequirements:
    dockerizePip: true
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    # Add these configurations
    docker: true
    host: "0.0.0.0"
    useChildProcesses: true

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/vpc.yml)}
  - ${file(resources/policies.yml)}
  - ${file(resources/api-gateway-authorizer.yml)}

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: python3.9
  region: eu-west-2
  iam:
    role: !GetAtt LambdaExecutionRoleAutoantibodydev.Arn
  endpointType: PRIVATE
  vpcEndpointIds:
    - vpce-0433c0454374657a5
  vpc:
    securityGroupIds:
      - !Ref ApiGatewaySecurityGroup
      - sg-096e7c877829d27b4
      - sg-00ce9690be085954c
    subnetIds:
      - ${env:VPC_SUBNET_A}
      - ${env:VPC_SUBNET_B}
  apiGateway:
    resourcePolicy:
      - Sid: allow-read-only-from-vpc
        Effect: Allow
        Principal: "*"
        Action: "execute-api:Invoke"
        Resource: "execute-api:/*"
        Condition:
          StringEquals:
            "aws:sourceVpc": ${env:VPC_ID}

  ecr:
    images:
      classify-small-image:
        path: functions/classify-small
        platform: linux/amd64
        # uri: 189545766043.dkr.ecr.eu-west-2.amazonaws.com/alchemab/autoantibody_classifier:latest

functions:
  get-multipart-upload-url:
    handler: functions/s3_files_handler/handler.get_multipart_upload_url
    timeout: 20
    environment:
      AUTOANTIBODY_S3_BUCKET: ${env:AUTOANTIBODY_S3_BUCKET}
    events:
      - http:
          path: get-multipart-upload-url
          method: get
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true
  get-multipart-upload-part-url:
    handler: functions/s3_files_handler/handler.get_multipart_upload_part_url
    timeout: 20
    environment:
      AUTOANTIBODY_S3_BUCKET: ${env:AUTOANTIBODY_S3_BUCKET}
    events:
      - http:
          path: get-multipart-upload-part-url
          method: get
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true
  complete_multipart_upload:
    handler: functions/s3_files_handler/handler.complete_multipart_upload
    timeout: 20
    environment:
      AUTOANTIBODY_S3_BUCKET: ${env:AUTOANTIBODY_S3_BUCKET}
    events:
      - http:
          path: complete-multipart-upload
          method: post
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true
  abort_multipart_upload:
    handler: functions/s3_files_handler/handler.abort_multipart_upload
    timeout: 20
    environment:
      AUTOANTIBODY_S3_BUCKET: ${env:AUTOANTIBODY_S3_BUCKET}
    events:
      - http:
          path: abort-multipart-upload
          method: get
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true
  download-file:
    handler: functions/s3_files_handler/handler.download_file
    timeout: 20
    environment:
      AUTOANTIBODY_S3_BUCKET: ${env:AUTOANTIBODY_S3_BUCKET}
      STAGE: ${env:STAGE}
    events:
      - http:
          path: download-file
          method: post
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true

  submit-pipeline:
    handler: functions/job-submit/submit_job.lambda_handler
    timeout: 30
    environment:
      STAGE: ${env:STAGE}
      AUTOANTIBODY_S3_BUCKET: ${env:AUTOANTIBODY_S3_BUCKET}
      NF_INPUTSDIR: ${env:NF_INPUTSDIR}
      NF_OUTPUTSDIR: ${env:NF_OUTPUTSDIR}
      NF_LOGSDIR: ${env:NF_LOGSDIR}
      NF_WORKDIR: ${env:NF_WORKDIR}
      REGION: ${env:REGION}
      JOB_DEFINITION: ${env:JOB_DEFINITION}
      MASTER_QUEUE: ${env:MASTER_QUEUE}
      GPU_QUEUE: ${env:GPU_PIPELINE_QUEUE}
    events:
      - http:
          path: submit-pipeline
          method: post
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true

  get-runs:
    handler: functions/contact-rds/handler.retrieve_runs
    timeout: 30
    events:
      - http:
          path: get-runs
          method: post
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true

  get-run-data:
    handler: functions/contact-rds/handler.get_run_data
    timeout: 30
    events:
      - http:
          path: get-run-data
          method: post
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true

  get-athena-data:
    handler: functions/contact-athena/handler.submit_query
    timeout: 30
    events:
      - http:
          path: query-athena
          method: get
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true

  poll-athena:
    handler: functions/contact-athena/handler.get_status
    timeout: 30
    events:
      - http:
          path: status
          method: post
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true
  get-athena-response:
    handler: functions/contact-athena/handler.get_data
    timeout: 30
    events:
      - http:
          path: get-athena-response
          method: post
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true

  classify-small:
    image: 189545766043.dkr.ecr.eu-west-2.amazonaws.com/alchemab/autoantibody_classifier:lambda
    timeout: 300
    memorySize: 2048
    environment:
      PYTHONPATH: /var/task:/app
      MODEL_PATH: /var/task/autoantibody_model/trained_model/classifier-model
      TOKENIZER_PATH: /var/task/autoantibody_model/tokenizers
    events:
      - http:
          path: classify-small
          method: post
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - Authorization
              - x-access-token
            allowCredentials: true
